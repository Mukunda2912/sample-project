# # This workflow will build a golang project
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go



name: sonar-project

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]
#     types: [opened, synchronize, reopened]


# jobs:
#   build:
#     runs-on: 
#     - self-hosted
#     - label1
 

#     steps:
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
#       - name: Set up Go
#         uses: actions/setup-go@v4
#         with:
#           go-version: '1.20'

#       - name: Build
#         run: go build -v ./src
#       - name: Run unit Tests
#         run: |
#            go test -coverprofile=./src/cov.out ./src/
#            go test -json ./src/ > reports.json
 
#       - name: Upload report.json to Sonarqube
#         uses: actions/upload-artifact@v3.1.2
#         with:
#           name: sonarqube-report
#           path: reports.json
  
#       - uses: sonarsource/sonarqube-scan-action@master
#         with:
#           args: >
#              -Dsonar.projectKey=first-ghapp
#              -Dsonar.exclusions=**/*_test.go
#              -Dsonar.go.coverage.reportPaths=./src/cov.out
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

             
             
             
      
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
          fetch-depth: 0
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: go build -v ./src
    - name: Run unit Tests
      run: |
          go test -coverprofile=./src/cov.out ./src/
          go test -json ./src/ > report.json
          
          go install github.com/jstemmer/go-junit-report/v2@latest
          go test -v ./src | go-junit-report > test-report.xml
          cp test-report.xml test-report2.xml
          ls
          ls ./src
      
    - name: Analyze with SonarCloud
      uses: SonarSource/sonarcloud-github-action@v1.9.1
      with:
        args: >
         -Dsonar.organization=mukunda2912
         -Dsonar.projectKey=Mukunda2912_sample-project
         -Dsonar.go.coverage.reportPaths=./src/cov.out
         -Dsonar.exclusions=**/*_test.go
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_CLOUD }}
