# # This workflow will build a golang project
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go



# name: sonar-project

# on:
#   push:
#     branches: [ "master" ]
# #     branches: 
# #       - main
# #   pull_request:
# #     branches: [ "master" ]
# #     types: [opened, synchronize, reopened]

# jobs:
#   sonarcloud:
#     name: SonarCloud
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v3
#       with:
#           fetch-depth: 0
#     - name: Set up Go
#       uses: actions/setup-go@v4
#       with:
#         go-version: '1.20'
#
#     - name: Build
#       run: go build -v ./src
#     - name: Run unit Tests
#       run: |
#           go test -coverprofile=./src/cov.out ./src/
#           go test -json ./src/ > report.json
          
# #     - name: Run Gosec Security Scanner
# #       run: |
# #           go get github.com/securego/gosec/cmd/gosec
# #           gosec -fmt=json -out report.json ./...
 
      
#     - name: Analyze with SonarQube
#       uses: sonarsource/sonarqube-scan-action@master
#       env:
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         SONAR_HOST_URL: ${{secrets.SONAR_HOST_URL}}
# #       with:
# #         args: >
# #          -Dsonar.organization=mukunda2912
# #          -Dsonar.projectKey=first-app
# #          -Dsonar.go.coverage.reportPaths=./src/cov.out
# #          -Dsonar.exclusions=**/*_test.go
     



on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
#     types: [opened, synchronize, reopened]


jobs:
  build:
    runs-on: 
    - self-hosted
    - label1
 

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Build
        run: go build -v ./src
      - name: Run unit Tests
        run: go test -coverprofile ./src/cov.out -json ./src > report.json
#            go test -coverprofile=./src/cov.out ./src/
 #           go test -json ./src/ > report.json
            
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
             -Dsonar.projectKey=first-ghapp
             -Dsonar.go.coverage.reportPaths=./src/cov.out
             -Dsonar.exclusions=**/*_test.go
             -Dsonar.go.tests.reportPaths=report.json
             
      
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
